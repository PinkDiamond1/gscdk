name: build tinygo

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ main ]

jobs:
  run:
    runs-on: ${{ matrix.os }}
    env:
      GSCDK_VERSION: v0.1.6
    strategy:
      matrix:
        # python-version: [3.7, 3.8, 3.9]
        # os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        python-version: [3.9]
        os: ['windows-latest', 'ubuntu-18.04', 'macos-latest']
      fail-fast: false

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Install wget
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install wget --no-progress
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Download llvm-build
        working-directory: compiler
        run: |
          wget https://github.com/uuosio/build-llvm/releases/download/v0.0.1/llvm-build-${{ matrix.os }}.tar.gz
          tar -xf llvm-build-${{ matrix.os }}.tar.gz
      - name: Cache wasi-libc sysroot
        uses: actions/cache@v2
        id: cache-wasi-libc
        with:
          key: ${{ matrix.os }}-wasi-libc-sysroot-v1
          path: lib/wasi-libc/sysroot
      - name: Build wasi-libc
        if: steps.cache-wasi-libc.outputs.cache-hit != 'true'
        working-directory: compiler
        run: make wasi-libc
      - name: Cache wasi-libc-eosio sysroot
        uses: actions/cache@v2
        id: cache-wasi-libc-eosio
        with:
          key: ${{ matrix.os }}-wasi-libc-eosio-sysroot-v1
          path: compiler/lib/wasi-libc-eosio/sysroot
      - name: Build wasi-libc-eosio
        if: steps.cache-wasi-libc-eosio.outputs.cache-hit != 'true'
        working-directory: compiler
        run: make wasi-libc-eosio
      - name: Build tinygo
        working-directory: compiler
        run: |
          make llvm-source
          make
          make release
      - name: Testing
        if: ${{ matrix.os != 'windows-latest' }}
        working-directory: compiler
        run: |
          ./build/tinygo help
      - name: get release file
        id: releasefile
        working-directory: compiler
        run: |
          echo "::set-output name=value::$(python ../scripts/get_release_file.py)"
      - name: rename file
        working-directory: compiler
        run: |
          mv ./build/${{ steps.releasefile.outputs.value }} ./build/uuosio.gscdk-${{ env.GSCDK_VERSION }}-${{ matrix.os }}.tar.gz
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get plat name
        id: platname
        run: |
          echo "::set-output name=value::$(python scripts/get_plat_name.py)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
      - name: copy tinygo to pysrc
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # remove symbol link
          rm pysrc/tinygo
          cp -r compiler/build/release/tinygo pysrc/tinygo
      - name: Build uuosio.gscdk
        run: |
          python setup.py sdist bdist_wheel --plat-name ${{ steps.platname.outputs.value }} > setup.log
      - name: get whl file
        id: whlfile
        run: |
          echo "::set-output name=value::$(python scripts/get_whl_file.py)"
      - name: Install uuosio.gscdk
        run: |
          python -m pip uninstall gscdk -y;python -m pip install ./dist/${{ steps.whlfile.outputs.value }}
      - name: Test
        working-directory: .
        run: |
          eosio-go help
      - name: release-tinygo
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./compiler/build/uuosio.gscdk-${{ env.GSCDK_VERSION }}-${{ matrix.os }}.tar.gz
            ./dist/${{ steps.whlfile.outputs.value }}
