name: build tinygo

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"
  # pull_request:
  #   branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      GSCDK_VERSION: 0.7.3
      TINYGO_VERSION: 0.24.2
    strategy:
      matrix:
        python-version: [3.9]
        os: ['windows-latest', 'ubuntu-20.04', 'macos-12']
        # python-version: [3.9]
        # os: ['ubuntu-20.04']
      fail-fast: false

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: seanmiddleditch/gha-setup-ninja@master
      - uses: brechtm/setup-scoop@v2
        with:
          scoop_update: 'false'
#https://github.com/ScoopInstaller/Scoop/issues/4917
      - name: Install Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          scoop bucket rm main
          scoop bucket add main
          scoop bucket add extras
          scoop install ninja
          choco install wget --no-progress
      - name:  Build code generator
        working-directory: src/codegenerator
        run: |
          go build .
      - name:  Download tinygo for windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          wget https://github.com/learnforpractice/tinygo/releases/download/v${{ env.TINYGO_VERSION }}/release-windows-2022.zip
          7z x release-windows-2022.zip -o./pysrc
          cp src/codegenerator/codegenerator.exe ./pysrc/tinygo/bin
      - name:  Download tinygo for linux
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run: |
          wget https://github.com/learnforpractice/tinygo/releases/download/v${{ env.TINYGO_VERSION }}/tinygo.linux-amd64.tar.gz
          tar -xf tinygo.linux-amd64.tar.gz -C ./pysrc
          cp src/codegenerator/codegenerator ./pysrc/tinygo/bin
      - name:  Download tinygo for macos
        if: ${{ matrix.os == 'macos-12' }}
        run: |
          wget https://github.com/learnforpractice/tinygo/releases/download/v${{ env.TINYGO_VERSION }}/tinygo.darwin-amd64.tar.gz
          tar -xf tinygo.darwin-amd64.tar.gz -C ./pysrc
          cp src/codegenerator/codegenerator ./pysrc/tinygo/bin
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: get plat name
        id: platname
        run: |
          echo "::set-output name=value::$(python scripts/get_plat_name.py)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install twine
      - name: Install ipyeos
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          python -m pip install ipyeos
      - name: Build uuosio.gscdk
        run: |
          python setup.py sdist bdist_wheel --plat-name ${{ steps.platname.outputs.value }} > setup.log
      - name: get whl file
        id: whlfile
        run: |
          echo "::set-output name=value::$(python scripts/get_whl_file.py)"
      - name: Install uuosio.gscdk
        run: |
          python -m pip uninstall gscdk -y;python -m pip install ./dist/${{ steps.whlfile.outputs.value }}
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      - name: Test tinygo
        working-directory: tinygo
        run: |
          cd tests/eosio/testcpp;go get -d github.com/uuosio/chain@master;./build.sh
      - name: Test ipyeos
        if: ${{ matrix.os == 'ubuntu-20.04' || matrix.os == 'macos-12' }}
        working-directory: tests
        run: |
          go-contract build -o test.wasm .
          PYTHON_SHARED_LIB_PATH=${{ env.pythonLocation }}/lib/libpython3.9.so python -m ipyeos -m pytest -s -x test.py
      - name: release-tinygo
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./dist/${{ steps.whlfile.outputs.value }}
      - name: Downloading whl files
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-20.04' }}
        working-directory: dist
        run: |
          rm *.whl
          python ../scripts/download.py ${{ env.GSCDK_VERSION }}
      - name: Publish a Python distribution to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-20.04' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
